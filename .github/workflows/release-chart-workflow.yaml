name: Release chart workflow

on:
  workflow_call:
    inputs:
      repository:
        required: true
        type: string
        description: >-
          Repository that contains the chart to be released. This is the 
          repository that is checked out and used to generate the chart and 
          index.
      release-tag:
        required: true
        type: string
        description: >-
          Release tag that is used to create the release. This is the tag that 
          is used to identify the release where the artifact is uploaded to.
      release-version:
        required: true
        type: string
        description: >-
          Release version that is used to create the release. This is used as the
          version in the helm chart, the index and the filename.
    secrets:
      github-token:
        required: true
        description: >-
          GitHub token that is used to create the release.
    outputs:
      html-url:
        value: ${{ jobs.publish-chart-release.outputs.html_url }}
        description: >-
          URL to the release that was created.

jobs:
  publish-chart-release:
    runs-on: ubuntu-latest
    outputs:
      html_url: ${{ steps.upload-chart.outputs.html_url }}
    steps:
      - name: Checkout the release
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repository }}
          fetch-depth: 0
          path: main-repo
          token: ${{ secrets.github-token }}

      - name: Checkout latest gh-pages
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repository }}
          ref: gh-pages
          path: gh-pages
          token: ${{ secrets.github-token }}

      - name: Install Helm
        uses: azure/setup-helm@v3
        env:
          GITHUB_TOKEN: ${{ secrets.github-token }}

      - name: Generate helm chart
        run: |
          helm package main-repo/charts/coop-app-chart --version ${{ inputs.release-version }}

      - name: Upload chart as release artifact
        uses: ncipollo/release-action@v1
        id: upload-chart
        with:
          tag: ${{ inputs.release-tag }}
          artifacts: coop-app-chart-${{ inputs.release-version }}.tgz
          allowUpdates: true
          omitNameDuringUpdate: true
          omitBodyDuringUpdate: true
          omitDraftDuringUpdate: true
          omitPrereleaseDuringUpdate: true

      - name: Update helm chart index
        run: |
          escape_special_chars() {
              echo "$1" | sed -e 's/[]\/$*.^[]/\\&/g'
          }

          # Generate URL for the current release
          helm repo index --url https://github.com/${{ inputs.repository }}/releases/download/${{ inputs.release-tag }}/ --merge gh-pages/index.yaml .
          mv index.yaml gh-pages/index.yaml

          # Fix URLs for previous assets in the release
          RELEASE_ASSET_NAMES=$(escape_special_chars $(gh release view ${{ inputs.release-tag }} --json assets | jq -r '.assets[].name'))
          RELEASE_ASSET_URLS=$(escape_special_chars $(gh release view ${{ inputs.release-tag }} --json assets | jq -r '.assets[].url'))
          # search index.yaml for all instances of https://.*/download/.*/RELEASE_ASSET_NAME and replace with RELEASE_ASSET_URL
          if [[ -n "${RELEASE_ASSET_NAMES// /}" ]]; then
            for i in $(seq 0 $((${#RELEASE_ASSET_NAMES[@]}-1))); do
                sed -i "s|-.*${RELEASE_ASSET_NAMES[$i]}|${RELEASE_ASSET_URLS[$i]}|g" gh-pages/index.yaml
            done
          fi

      - name: Configure git
        working-directory: gh-pages
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Update index file in GitHub pages
        working-directory: gh-pages
        run: |
          git add .
          git commit -m "Update index with version ${{ inputs.release-version }}"
          git push origin gh-pages
